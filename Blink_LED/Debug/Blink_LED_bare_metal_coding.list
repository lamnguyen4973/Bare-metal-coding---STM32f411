
Blink_LED_bare_metal_coding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000400  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000400  08000400  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000400  08000400  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000404  08000404  00001404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000408  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800040c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800040c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001027  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000049b  00000000  00000000  0000305b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  000034f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013f  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013cd7  00000000  00000000  000037ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020e6  00000000  00000000  000174d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ec8e  00000000  00000000  000195bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009824a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  00098290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000987e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003e8 	.word	0x080003e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080003e8 	.word	0x080003e8

080001d8 <delay_ms>:
// addresses GPIOD register
#define GPIOD_MODER  (uint32_t*)(GPIOD_BASE + 0x00)
#define GPIOD_ODR  (uint32_t*)(GPIOD_BASE + 0x14)

static void delay_ms(volatile uint32_t ms)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	for (volatile uint32_t i = 0; i< ms * 4000; i++);
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e002      	b.n	80001ec <delay_ms+0x14>
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80001f2:	fb03 f202 	mul.w	r2, r3, r2
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d8f4      	bhi.n	80001e6 <delay_ms+0xe>
}
 80001fc:	bf00      	nop
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <main>:
int main (void){
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// enable clk for GPIOD
	*RCC_AHB1 |= (0x1 << 3);
 8000210:	4b20      	ldr	r3, [pc, #128]	@ (8000294 <main+0x88>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a1f      	ldr	r2, [pc, #124]	@ (8000294 <main+0x88>)
 8000216:	f043 0308 	orr.w	r3, r3, #8
 800021a:	6013      	str	r3, [r2, #0]
	// set MODE for GPIOD
	*GPIOD_MODER &= ~(0xff << 24);
 800021c:	4b1e      	ldr	r3, [pc, #120]	@ (8000298 <main+0x8c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a1d      	ldr	r2, [pc, #116]	@ (8000298 <main+0x8c>)
 8000222:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000226:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |= (0x01 << 24);
 8000228:	4b1b      	ldr	r3, [pc, #108]	@ (8000298 <main+0x8c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1a      	ldr	r2, [pc, #104]	@ (8000298 <main+0x8c>)
 800022e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000232:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |= (0x01 <<26);
 8000234:	4b18      	ldr	r3, [pc, #96]	@ (8000298 <main+0x8c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a17      	ldr	r2, [pc, #92]	@ (8000298 <main+0x8c>)
 800023a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800023e:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |= (0x01 <<28);
 8000240:	4b15      	ldr	r3, [pc, #84]	@ (8000298 <main+0x8c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a14      	ldr	r2, [pc, #80]	@ (8000298 <main+0x8c>)
 8000246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800024a:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |= (0x01 <<30);
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <main+0x8c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a11      	ldr	r2, [pc, #68]	@ (8000298 <main+0x8c>)
 8000252:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000256:	6013      	str	r3, [r2, #0]

	while (1){
	//set GPIOD is output
	*GPIOD_ODR ^= (1 << 12);
 8000258:	4b10      	ldr	r3, [pc, #64]	@ (800029c <main+0x90>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0f      	ldr	r2, [pc, #60]	@ (800029c <main+0x90>)
 800025e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8000262:	6013      	str	r3, [r2, #0]
	*GPIOD_ODR ^= (1 << 13);
 8000264:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <main+0x90>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0c      	ldr	r2, [pc, #48]	@ (800029c <main+0x90>)
 800026a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800026e:	6013      	str	r3, [r2, #0]
	*GPIOD_ODR ^= (1 << 14);
 8000270:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <main+0x90>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a09      	ldr	r2, [pc, #36]	@ (800029c <main+0x90>)
 8000276:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800027a:	6013      	str	r3, [r2, #0]
	*GPIOD_ODR ^= (1 << 15);
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <main+0x90>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a06      	ldr	r2, [pc, #24]	@ (800029c <main+0x90>)
 8000282:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 8000286:	6013      	str	r3, [r2, #0]
	delay_ms(500);
 8000288:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800028c:	f7ff ffa4 	bl	80001d8 <delay_ms>
	*GPIOD_ODR ^= (1 << 12);
 8000290:	bf00      	nop
 8000292:	e7e1      	b.n	8000258 <main+0x4c>
 8000294:	40023830 	.word	0x40023830
 8000298:	40020c00 	.word	0x40020c00
 800029c:	40020c14 	.word	0x40020c14

080002a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <NMI_Handler+0x4>

080002a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <HardFault_Handler+0x4>

080002b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <MemManage_Handler+0x4>

080002b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <BusFault_Handler+0x4>

080002c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <UsageFault_Handler+0x4>

080002c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002f6:	f000 f83f 	bl	8000378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <SystemInit+0x20>)
 8000306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800030a:	4a05      	ldr	r2, [pc, #20]	@ (8000320 <SystemInit+0x20>)
 800030c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000324:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800035c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000328:	f7ff ffea 	bl	8000300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	@ (8000360 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	@ (8000364 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	@ (8000368 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	@ (8000370 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000352:	f000 f825 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000356:	f7ff ff59 	bl	800020c <main>
  bx  lr    
 800035a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000368:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 800036c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000370:	20000024 	.word	0x20000024

08000374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <HAL_IncTick+0x20>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	4b06      	ldr	r3, [pc, #24]	@ (800039c <HAL_IncTick+0x24>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4413      	add	r3, r2
 8000388:	4a04      	ldr	r2, [pc, #16]	@ (800039c <HAL_IncTick+0x24>)
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000000 	.word	0x20000000
 800039c:	20000020 	.word	0x20000020

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	@ (80003d8 <__libc_init_array+0x38>)
 80003a4:	4c0d      	ldr	r4, [pc, #52]	@ (80003dc <__libc_init_array+0x3c>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	2600      	movs	r6, #0
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	@ (80003e0 <__libc_init_array+0x40>)
 80003b2:	4c0c      	ldr	r4, [pc, #48]	@ (80003e4 <__libc_init_array+0x44>)
 80003b4:	f000 f818 	bl	80003e8 <_init>
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	2600      	movs	r6, #0
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000400 	.word	0x08000400
 80003e4:	08000404 	.word	0x08000404

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
